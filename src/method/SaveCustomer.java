package method;

public class SaveCustomer {
		// 배열에 고객의 정보를 저장하는 프로그램
		// 기능 : 가입, 삭제, 보기, 수정
		// 1. 메서드의 정의와 활용 < point >
		// 메서드는 기능, 변수는 저장의 의미를 가지고 있다.
		// # Step 1. 의미분석 < 기능과 변수를 구분하는 것 >
		// 주머니에 돈을 쓸어 담는다. >> 기능 : 쓸어담는 기능, 변수 : 주머니
		// 배열에 문자열을 저장한다. >> 기능 : 배열에 저장한다 .변수 : 문자열, 배열
		
		// # Step 2. 기능의 분류 < 기능을 사용하기 위해서 호출자가 넘겨 주는 값 >
		// 기능의 정의 : 과자를 사온다라고 친다면, 실제 기능은 동생이 한다. 
		// 동생에게 호출을 할 때(심부름 시킬때,) 돈을 안주면 1번, 주면 2번의 의미
		// 주머니에 돈을 쓸어 담는다 ? >> 기능 : 쓸어 담는 기능이라고 한다면
		// 기능을 수행하기 위해서는 주머니와 돈이라는 것이 있어야 한다.
		// 돈은 #1 . 기능안에서 자체적으로 돈(예 20,000원)을 담는것
		// #2 . 기능을 사용하면서 돈을 넘겨주는 것(*) 총 두가지가 있다.
		// 예) 학생들에게 똑같이 3개의 사탕을 나눠주려고 한다. #1
		// => 어떤 정보도 넘겨 받을 필요가 없다.
		// 예) 1,2,3학년 학생들에게 차별적으로 사탕을 나눠주려고 한다. # 2
		// => 기능을 실행할 때 학년의 정보를 넘겨주게 된다.
		
		// # Step 3. 기능을 처리한 후에 돌려줘야 할 것이 있는가? <호출한 자에게 넘겨주는 값이 있/없다. > - 코드의 재사용성과 관련이 있음
		//	코드의 재사용성 ? : 코드룰 한번만 작성하고 여러곳에서 가져다 사용하는 것. 															
		// => 예) 학생들에게 똑같이 3개의 사탕을 나눠 주려고 한다. return값 : 사탕 3개.
		// 2. 1차원 배열의 활용
		// 3. 라이브러리 활용 : Scanner
// 위 기능을 전공저긍로 분석 한다면
// ## 1. 기능의 정의 ( ✅정의 1개 )
// ## 2. 기능의 호출 ( ✅호출부 여러개 )
	
// ## 기능을 수행하기 위해서 호출부에서 자료를 전달하는 것을 파라미터라고 부름.
// ✅파라미터 (Parameter) : 호출부에서 기능을 호출할 때 넘겨주는 값
// 호출부에서 기능을 호출할 때 기능의 결과값을 받을 것인가? ✅Return 값
	public static void checkSign() { // 메서드 정의 : 괄호를 보고 알 수 있다. 개발자가 정의한 메서드
											// 하나의 메서드에는 하나의 기능을 사용하는 것이 원칙
		System.out.println("checkSign 기능이 수행됩니다.");
	}
	
	public static void printID(String id) {
		System.out.println("당신이 입력한 ID는 : " + id);
	}
	
	public static void checkSpecialChar(String id) {
		System.out.println("유효성을 검사할 아이디 : " + id);
	}
	
	public static void main(String[] args) {
		printID("aaaa");
		printID("bbbb");
		checkSign();
		System.out.println("hahaha");
		checkSign();
		System.out.println("gogogo");
		checkSpecialChar("dddd");
	
	}
}
